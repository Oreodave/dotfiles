#+TITLE: Oreodave's Emacs configuration
#+AUTHOR: Oreodave
#+DESCRIPTION: My Doom Emacs configuration!

* Preclude
This is my [[https://github.com/hlissner/doom-emacs][Doom Emacs]] configuration, which I try to use for as many things as
possible. It is currently my main editor overall, literally overtaking my life.
* Variables
Bootstrapping literate module and setting up basic variables.
** Bootstrap literate
Load the literate.el file to start parsing.
#+BEGIN_SRC elisp
(load (expand-file-name (concat doom-private-dir "bin/literate.el")))
#+END_SRC
** Doom Variables
#+BEGIN_SRC elisp
(after! core-keybinds
  (setq doom-localleader-key ",")
  (setq doom-theme 'doom-molokai)
  (setq doom-font (font-spec :family "Hack" :size 17)))
#+END_SRC
- Set the doom localleader to "," because it's faster
- Using the font [[https://sourcefoundry.org/hack/][Hack]] with Fira code ligatures
** Other variables
#+BEGIN_SRC elisp
(setq completion-ignore-case t)
(setq truncate-lines t)
(setq display-line-numbers-type nil)
(display-battery-mode 1)
(setq-default frame-title-format '("%b - εmacs"))
(cl-pushnew '("Libgen" "https://libgen.me/search/all?search=%s") +lookup-provider-url-alist :key #'car)
#+END_SRC
Some quality of life things and others that I couldn't really put in one category
- Displaying line numbers isn't usually something I do. If need be, I'll just
  open them with *<SPC>tl*.
- Set org directory
- Add libgen to search providers
- Looking at my battery percentage isn't very necessary but still really cool
*
* Package Config
** Projectile
#+BEGIN_SRC elisp
(after! projectile
  (setq oreodave-tags-alist '("Makefile" "node_modules" "bin" "dist" "obj" "'*.json'"))
  (defun oreodave/config/construct-tags ()
    (reduce (lambda (x y) (concat x y)) (mapcar (lambda (i) (concat " --exclude=" i)) oreodave-tags-alist)
            :initial-value "exctags -Re ")
    )
  (setq projectile-tags-command (oreodave/config/construct-tags))
  (cl-pushnew "CMakeLists.txt" projectile-project-root-files :test #'string=)
  (cl-pushnew "README.org" projectile-project-root-files :test #'string=)
  (cl-pushnew "doc.org" projectile-project-root-files :test #'string=))
#+END_SRC

Really simple, just want to set projectile-tags-command when projectile has
loaded, and easily add new ignores if necessary. Add a new ignore to the tags-alist.

Add a few items to the projectile-root-files list
** DAP
#+BEGIN_SRC elisp
(after! dap-mode
  (defun oreodave/debug ()
    (interactive)
    (dap-ui-mode)
    (dap-ui-locals)
    (dap-ui-sessions))
  (map!
   :leader
   :desc "Start debugging setup" "cD" #'oreodave/debug))
#+END_SRC
A keybind and a routine

- Routine sets up the panes that I like to use, instead of having to M-x'ing it
- *<SPC>cD* starts up the routine

** Wakatime
#+BEGIN_SRC elisp
(use-package! wakatime-mode
  :after-call (pre-command-hook)
  :config
  (setq wakatime-cli-path (expand-file-name "~/.local/bin/wakatime"))
  (setq wakatime-api-key (replace-regexp-in-string "\n" "" (oreodave/password-store/get-password "Keys/Wakatime")))
  (global-wakatime-mode +1))
#+END_SRC
Using new password holder (pass) to help with secure transactions. Doing all
other stuff as well, cos Henrik may remove the Wakatime module.
** Elfeed
#+BEGIN_SRC elisp
(after! elfeed
  (defun oreodave/elfeed/load-feeds ()
    (interactive)
    (setq elfeed-feeds nil)
    (elfeed-load-opml (concat org-directory "/elfeed.opml")))

  (defun oreodave/elfeed/on-new-feed ()
    (interactive)
    (elfeed-org-export-opml)
    (write-file (concat org-directory "/elfeed.opml"))
    (kill-current-buffer))

  (map!
   (:map elfeed-search-mode-map
     :localleader
     :desc "Update feeds" "u" #'elfeed-update)
   (:leader
     :prefix "o"
     :desc "Open RSS"     "f" #'=rss))

  (add-hook 'elfeed-org-new-entry-hook 'oreodave/elfeed/on-new-feed))
#+END_SRC
** VTerm
#+BEGIN_SRC elisp
(use-package! vterm
  :after-call (pre-command-hook))
#+END_SRC
** Dashboard
#+BEGIN_SRC elisp
(defun doom-display-benchmark-h (&optional return-p)
  "Display a benchmark, showing number of packages and modules, and how quickly
they were loaded at startup.

If RETURN-P, return the message as a string instead of displaying it."
  (funcall (if return-p #'format #'message)
           "εmacs loaded %d packages, %d modules in %.03fs"
           (- (length load-path) (length doom--initial-load-path))
           (if doom-modules (hash-table-count doom-modules) 0)
           (or doom-init-time
               (setq doom-init-time
                     (float-time (time-subtract (current-time) before-init-time))))))

(setq fancy-splash-image "~/Pictures/space2.png") ; splash image
(setq +doom-dashboard-name "*dashboard*")

(setq +doom-dashboard-functions ; limit the dashboard items
      '(doom-dashboard-widget-banner
        doom-dashboard-widget-shortmenu
        doom-dashboard-widget-loaded))

(setq +doom-dashboard-menu-sections ; Set a specific amount of items
      '(("Open org-agenda"
         :icon (all-the-icons-octicon "calendar" :face 'font-lock-keyword-face)
         :when (fboundp 'org-agenda)
         :action org-agenda)
        ("Open books"
         :icon (all-the-icons-octicon "book" :face 'font-lock-keyword-face)
         :action oreodave/goto-books)
        ("Check the weather"
         :icon (all-the-icons-wicon "rain" :face 'font-lock-keyword-face)
         :action oreodave/weather)
        ("Jump to bookmark"
         :icon (all-the-icons-octicon "bookmark" :face 'font-lock-keyword-face)
         :action bookmark-jump)))
#+END_SRC
- Space image comes from [[https://flaticon.com][website]]
- Remove the Github link to the official Doom Emacs repository: it's in muscle memory
  at this point.
- Added my own menu items:
  - Books
  - Weather
* Language Config
** C-style languages
#+BEGIN_SRC elisp
(after! cc-mode
  (c-add-style "Allman"
               '((c-basic-offset . 2)
                 (c-comment-only-line-offset . 0)
                 (c-hanging-braces-alist (brace-list-open)
                                         (brace-entry-open)
                                         (substatement-open after)
                                         (block-close . c-snug-do-while)
                                         (arglist-cont-nonempty))
                 (c-cleanup-list brace-else-brace)
                 (c-offsets-alist
                  (statement-block-intro . +)
                  (knr-argdecl-intro . 0)
                  (substatement-open . 0)
                  (substatement-label . 0)
                  (label . 0)
                  (statement-cont . +))))
  (c-add-style "C#"
               '((c-basic-offset . 4)
                 (c-comment-only-line-offset .0)
                 (c-hanging-braces-alist (brace-list-open)
                                         (brace-entry-open)
                                         (substatement-open after)
                                         (block-close . c-snug-do-while)
                                         (arglist-cont-nonempty))
                 (c-cleanup-list brace-else-brace)
                 (c-offsets-alist
                  (statement-block-intro . 0)
                  (knr-argdecl-intro . 0)
                  (substatement-open . 0)
                  (substatement-label . 0)
                  (statement-cont . +)
                  (label . 0)))))
#+END_SRC
Emacs doesn't have the full range of styles that I want, so lemme just do it myself.
** CSharp
#+BEGIN_SRC elisp
(after! csharp-mode
  (setq omnisharp-server-executable-path "~/bin/omnisharp-roslyn/run")
  (defun oreodave/csharp/get-unit-test-in-project ()
    "Unit test anywhere using CTags or ETags and C#"
    (interactive)
    (let* ((tags-file (counsel-etags-locate-tags-file))
           (cands (counsel-etags-collect-cands "void.*Test" t buffer-file-name))) ; void.*Test assumes your tests are using something like XUnit and end with Test
      (ivy-read
       "Choose test: "
       cands
       :action
       (lambda (item)
         ;; From the counsel-etags file-open-api function
         (when (string-match "\\`\\(.*?\\):\\([0-9]+\\):\\(.*\\)\\'" item)
           (let*
               ((file (match-string-no-properties 1 item))
                (linenum (match-string-no-properties 2 item))
                ;; always calculate path relative to TAGS
                (default-directory (counsel-etags-tags-file-directory)))

             (counsel-etags-push-marker-stack (point-marker))
             (find-file file)
             (counsel-etags-forward-line linenum)
             (omnisharp-unit-test-at-point))))
       :caller 'oreodave/csharp/get-unit-tests-in-project)))
  (defun omnisharp--unit-test-emit-results (passed results)
    "Emits unit test results as returned by the server to the unit test result buffer.
PASSED is t if all of the results have passed. RESULTS is a vector of status data for
each of the unit tests ran."
                                        ; we want to clean output buffer for result if things have passed otherwise
                                        ; compilation & test run output is to be cleared and results shown only for brevity

    (omnisharp--unit-test-message "")

    (seq-doseq (result results)
      (-let* (((&alist 'MethodName method-name
                       'Outcome outcome
                       'ErrorMessage error-message
                       'ErrorStackTrace error-stack-trace
                       'StandardOutput stdout
                       'StanderError stderr) result)
              (outcome-is-passed (string-equal "passed" outcome)))

        (omnisharp--unit-test-message
         (format "[%s] %s "
                 (propertize
                  (upcase outcome)
                  'font-lock-face (if outcome-is-passed
                                      '(:foreground "green" :weight bold)
                                    '(:foreground "red" :weight bold)))
                 (omnisharp--truncate-symbol-name method-name 76)))

          (if error-stack-trace
              (omnisharp--unit-test-message error-stack-trace))

          (unless (= (seq-length stdout) 0)
            (omnisharp--unit-test-message "Standard output:")
            (seq-doseq (stdout-line stdout)
              (omnisharp--unit-test-message stdout-line)))

          (unless (= (seq-length stderr) 0)
            (omnisharp--unit-test-message "Standard error:")
            (seq-doseq (stderr-line stderr)
              (omnisharp--unit-test-message stderr-line)))
          ))

    (omnisharp--unit-test-message "")

    (if (eq passed :json-false)
        (omnisharp--unit-test-message
         (propertize "*** UNIT TEST RUN HAS FAILED ***"
                     'font-lock-face '(:foreground "red" :weight bold)))
      (omnisharp--unit-test-message
       (propertize "*** UNIT TEST RUN HAS SUCCEEDED ***"
                   'font-lock-face '(:foreground "green" :weight bold)))
      )
    nil)

  (add-hook! 'csharp-mode-hook
             '(lambda()
                (omnisharp-mode)
                (c-set-style "C#"))) ; Hook for csharp setting variables

  (map! ; CSharp Keybinds
   :map csharp-mode-map
   :localleader
   :desc   "Format buffer"            "="    #'omnisharp-code-format-entire-file
   (:prefix "t"
     :desc "Select Test in Project"    "t"   #'oreodave/csharp/get-unit-test-in-project)))
     #+END_SRC

- I have custom installed the omnisharp roslyn executable, so I'd rather use
  that
- C# code is better at 4 space indents, but I indent most of my C code at 2
  space indents because it looks nicer :)
- Implemented my own function which piggy backs counsel etags to globally search
  tags for test specific context, then goes to it and uses an omnisharp test
  command to unit test it. Basically global test search in C# projects. To use
  this, just make sure you have tags compiled and that all your tests are
  written as some public void *name* _Test (i.e. they are appended with _Test so
  that the pattern can be matched)
** Python
#+BEGIN_SRC elisp
(after! python
  (setq python-version-checked t)
  (setq python-python-command "python3")
  (setq python-shell-interpreter "python3")
  (setq flycheck-python-pycompile-executable "python3")

  (map! ; Python keybinds
   :map python-mode-map
   :localleader
   :desc "Start python minor" "c" #'run-python
   :desc "Format buffer"      "=" #'py-yapf-buffer
   (:prefix "s"
     :desc "Send region REPL" "r" #'python-shell-send-region
     :desc "Send buffer"      "b" #'python-shell-send-buffer
     :desc "Send function"    "f" #'python-shell-send-defun)))
#+END_SRC
- I do python development for Python3, so I need to set the flycheck python checker, as well as the interpreter, to be Python3
- Most of my python work is in scripts or ideas, so I don't need extensive testing utilities or anything like that
- I run my python code a LOT and thus need commands for sending bits or whole scripts into the REPL
** TypeScript
#+BEGIN_SRC elisp
(after! typescript-mode
  (setq typescript-indent-level 2)
  (setq tide-format-options '(:indentSize 2 :tabSize 2))
  (after! lsp
    (cl-pushnew '(typescript-mode . "typescript") lsp-language-id-configuration :key #'car)
    (lsp-register-client
     (make-lsp-client
      :new-connection (lsp-stdio-connection "typescript-language-server --stdio")
      :major-modes '(typescript-mode)
      :server-id 'typescript))))
#+END_SRC
- Typescript (in my opinion) should be indented by 2
- Setup the LSP server on the lsp-language-id-config in case it hasn't already
* Keymap
#+BEGIN_SRC elisp
(map!
 :leader
 :desc   "Compile via make"   "cC"      #'+make/run ; I compile stuff all the time
 :desc   "Shell command"      "!"       #'shell-command ; Better than M-!

 (:prefix ("m" . "personal") ; Personal
   :desc   "Open books"         "b"     #'oreodave/goto-books ; I like my books
   :desc   "Open school dir"    "s"     #'oreodave/goto-school ; I like my schooling
   :desc   "Open weather"       "w"     #'oreodave/weather ; Nah I don't like the weather
   :desc   "Change theme"       "t"     #'oreodave/set-new-theme ; From my own collection
   :desc   "Reload emacs"       "r"     #'oreodave/reload) ; Reload is necessary

 (:after counsel ; Counsel or ivy
   :desc   "M-x"                "<SPC>" #'counsel-M-x ; Redefine as M-x because of my muscle memory with spacemacs
   :desc   "Find file here"     "f."    #'counsel-find-file ; Sometimes use this instead of <SPC>ff
   (:prefix ("s" . "search")
     :desc "RipGrep!"           "r"     #'counsel-rg ; Ripgrep is faster than Ag in most cases and makes me feel cool
     :desc "Search Tags"        "t"     #'counsel-etags-find-tag)); is quicker to do than <SPC>/b, for something that is done so often

 (:prefix ("w" . "window") ; Windows
   :desc "Close window"       "d"       #'+workspace/close-window-or-workspace ; is slightly closer together than <SPC>wc
   :desc "Switch window"      "W"       #'ace-window ; is also used in spacemacs so I'd rather use this
   :desc "Swap windows"       "S"       #'ace-swap-window) ; allows me to switch windows more efficiently than before, better than just motions

 (:prefix ("c" . "code") ; Code
   :desc "Fold all in level"  "f"       #'hs-hide-level
   (:after format-all
     :desc "Format code" "="            #'format-all-buffer)
   (:after lsp
     :desc "Execute action" "a"         #'lsp-execute-code-action))

 (:prefix ("b" . "buffers") ; Buffers
   :desc "Close buffer"       "d"       #'doom/kill-this-buffer-in-all-windows)

 (:after projectile
   :desc   "Switch to p-buffer" ">"     #'projectile-switch-to-buffer ; Opposing <SPC>< which counsel's all buffers
   (:prefix ("p" . "project")
     :desc "Regen tags"         "g"     #'projectile-regenerate-tags
     :desc "Open project files" "f"     #'projectile-find-file))

 (:prefix ("z" . "font") ; Fonts
   :desc "Increase font"  "+"           #'doom/increase-font-size
   :desc "Decrease font"  "-"           #'doom/decrease-font-size
   :desc "Adjust font"    "z"           #'text-scale-adjust)

 (:prefix ("F" . "frame") ; Frames
   :desc "Kill frame"           "d"     #'delete-frame
   :desc "Current buffer frame" "m"     #'make-frame
   :desc "Choose Buffer frame"  "n"     #'display-buffer-other-frame
   :desc "Switch frames"        "o"     #'other-frame)

 (:prefix ("o" . "open")
   :after org
   :desc "Calendar"           "c"       #'=calendar))
#+END_SRC
